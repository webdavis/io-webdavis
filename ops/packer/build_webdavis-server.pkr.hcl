# This file was autogenerated by the BETA 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# See https://www.packer.io/docs/from-1.5/blocks/packer for more info.
packer {
  required_version = ">= 1.6.6"
}

# All generated input variables will be of 'string' type as this is how Packer JSON views them;
# you can change their type later on. Read the variables type constraints documentation:
# https://www.packer.io/docs/from-1.5/variables#type-constraints for more info.
variable "file_url" {
  type = string
  default = "https://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2021-01-12/2021-01-11-raspios-buster-armhf-lite.zip"
}

variable "ansible_vault_password" {
  sensitive = true
  type = string
  default = env("ANSIBLE_VAULT_PASSWORD")
}

variable "isotime" {
  type = string
  default = formatdate("DD MMM YYYY hh:mm ZZZ", "2018-01-02T23:12:01Z")
}

# "timestamp" template function replacement
locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# source blocks are generated from your builders; a source can be referenced in build blocks. A
# build block runs provisioner and post-processors on a source. Read the documentation for
# source blocks here: https://www.packer.io/docs/from-1.5/blocks/source
source "arm" "webdavis-server" {
  file_checksum_type = "sha256"
  file_checksum_url = "${var.file_url}.sha256"
  file_target_extension = "zip"
  file_urls = ["${var.file_url}"]
  image_build_method = "resize"
  image_chroot_env = [
    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.local/bin",
    "ANSIBLE_VAULT_PASSWORD='${var.ansible_vault_password}'"
  ]
  image_mount_path = "/mnt/packer-raspberry-chroot"
  image_partitions {
    filesystem = "vfat"
    mountpoint = "/boot"
    name = "boot"
    size = "256M"
    start_sector = "8192"
    type = "c"
  }
  image_partitions {
    filesystem = "ext4"
    mountpoint = "/"
    name = "root"
    size = "0"
    start_sector = "532480"
    type = "83"
  }
  image_path = "webdavis-server-${var.isotime}.img"
  image_size = "8G"
  image_type = "dos"
  qemu_binary_destination_path = "/usr/bin/qemu-arm-static"
  qemu_binary_source_path = "/usr/bin/qemu-arm-static"
}

# A build block invokes sources and runs provisioning steps on them. The documentation for
# build blocks can be found here: https://www.packer.io/docs/from-1.5/blocks/build
build {
  sources = ["source.arm.webdavis-server"]

  provisioner "shell" {
    script = "./scripts/install-ansible"
  }

  provisioner "ansible-local" {
    command = "PYTHONUNBUFFERED=1 ansible-playbook"
    extra_arguments = [
      "--limit=localhost"
    ]
    playbook_dir = "./"
    playbook_file = "./build_webdavis-server.yml"
  }

  provisioner "shell" {
    script = "./scripts/remove-ansible"
  }

  post-processor "manifest" {
    only = ["webdavis-server"]
    output = "manifest_webdavis-server.json"
    strip_path = true
  }
}
